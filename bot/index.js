const fs = require("fs");
const path = require("path");
const TelegramBot = require("node-telegram-bot-api");

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new TelegramBot("6350950492:AAF_y895hhntnURQ1PBB5h1WqYn2nCgzUeo", {
  polling: true,
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const mainMenuKeyboard = {
    reply_markup: {
      keyboard: [
        [{ text: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" }, { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" }],
        [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" }],
      ],
    },
  };

  bot.sendMessage(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
bot.onText(/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏/, (msg) => {
  const chatId = msg.chat.id;
  const categoriesMenuKeyboard = {
    reply_markup: {
      keyboard: [
        [
          { text: "iPhone üì±" },
          { text: "AirPods üéß" },
          { text: "Apple Watch ‚åöÔ∏è" },
        ],
        [{ text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }],
      ],
    },
  };

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", categoriesMenuKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ–ª–µ–π iPhone
bot.onText(/iPhone üì±/, (msg) => {
  const chatId = msg.chat.id;
  const description = "iPhone 12";
  const imagePath = path.join(__dirname, "images", "iphone12_blue.png");
  const colorButtons = [
    { text: "–°–∏–Ω–∏–π", callback_data: "blue" },
    { text: "–ó–µ–ª–µ–Ω—ã–π", callback_data: "green" },
    { text: "–ü—É—Ä–ø—É—Ä–Ω—ã–π", callback_data: "purple" },
    { text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "close" },
  ];

  bot
    .sendPhoto(chatId, imagePath, {
      caption: description,
      reply_markup: {
        inline_keyboard: [colorButtons],
      },
    })
    .then((sentMessage) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      userState[chatId] = sentMessage.message_id;
    })
    .catch((error) => {
      console.error("Error sending photo:", error);
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ü–≤–µ—Ç–∞ iPhone
bot.on("callback_query", (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  if (data === "close") {
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, messageId);
  } else {
    const imagePath = path.join(__dirname, "images", `iphone12_${data}.png`);

    if (fs.existsSync(imagePath)) {
      bot
        .sendPhoto(chatId, imagePath, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–∏–Ω–∏–π", callback_data: "blue" }],
              [{ text: "–ó–µ–ª–µ–Ω—ã–π", callback_data: "green" }],
              [{ text: "–ü—É—Ä–ø—É—Ä–Ω—ã–π", callback_data: "purple" }],
              [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "close" }],
            ],
          },
          caption: "iPhone 12",
          message_id: messageId,
        })
        .catch((error) => {
          console.error("Error sending photo:", error);
        });
    } else {
      bot
        .answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
          show_alert: true,
        })
        .catch((error) => {
          console.error("Error answering callback query:", error);
        });
    }
  }
});

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userState = {};
