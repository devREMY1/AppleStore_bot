const fs = require("fs");
const path = require("path");
const TelegramBot = require("node-telegram-bot-api");
const { connectToDatabase } = require("./db");
const express = require("express");
const app = express();

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const botToken = "6350950492:AAF_y895hhntnURQ1PBB5h1WqYn2nCgzUeo"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new TelegramBot(botToken, { polling: true });

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ —á–∞—Ç–∞
  const userName = msg.from.username;
  const mainMenuKeyboard = {
    reply_markup: {
      keyboard: [
        [{ text: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" }, { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" }],
        [{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" }],
      ],
    },
  };

  if (!userName || !chatId) {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    return;
  }

  bot.sendMessage(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuKeyboard);

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = await connectToDatabase();
    const collection = db.collection("TelegramUserID"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º chatId
    const existingUser = await collection.findOne({ idTelegram: chatId });

    if (!existingUser) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º chatId –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await collection.insertOne({ name: userName, idTelegram: chatId });
      console.log(
        `ID —á–∞—Ç—É —Ç–∞ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ: ${userName}, ${chatId}`
      );
      bot.sendMessage(chatId, "–í—ñ—Ç–∞—é!");
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID —á–∞—Ç—É ${chatId} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:", error);
    bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.onText(/iPhone üì±/, (msg) => {
  const chatId = msg.chat.id;
  const description = "iPhone 12";
  const imagePath = path.join(__dirname, "images", "iphone12_blue.png");
  const colorButtons = [
    { text: "–°–∏–Ω–∏–π", callback_data: "blue" },
    { text: "–ó–µ–ª–µ–Ω—ã–π", callback_data: "green" },
    { text: "–ü—É—Ä–ø—É—Ä–Ω—ã–π", callback_data: "purple" },
    { text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "close" },
  ];

  bot
    .sendPhoto(chatId, imagePath, {
      caption: description,
      reply_markup: {
        inline_keyboard: [colorButtons],
      },
    })
    .then((sentMessage) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      userState[chatId] = sentMessage.message_id;
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:", error);
    });
});

bot.on("callback_query", (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  if (data === "close") {
    bot.deleteMessage(chatId, messageId);
  } else {
    const imagePath = path.join(__dirname, "images", `iphone12_${data}.png`);

    if (fs.existsSync(imagePath)) {
      bot
        .sendPhoto(chatId, imagePath, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–∏–Ω–∏–π", callback_data: "blue" }],
              [{ text: "–ó–µ–ª–µ–Ω—ã–π", callback_data: "green" }],
              [{ text: "–ü—É—Ä–ø—É—Ä–Ω—ã–π", callback_data: "purple" }],
              [{ text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "close" }],
            ],
          },
          caption: "iPhone 12",
          message_id: messageId,
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:", error);
        });
    } else {
      bot
        .answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
          show_alert: true,
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback –∑–∞–ø—Ä–æ—Å:", error);
        });
    }
  }
});

module.exports = bot; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
